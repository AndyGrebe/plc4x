<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.plc4x.sandbox</groupId>
    <artifactId>test-plc4x-mqtt</artifactId>
    <version>0.10.0-SNAPSHOT</version>
  </parent>

  <artifactId>test-plc4x-mqtt-go</artifactId>
  <!--packaging>mvn-golang</packaging-->
  <packaging>pom</packaging>
  <name>Sandbox: Test MQTT Driver: Go</name>

  <properties>
    <!-- Tell Sonar where to find the sources -->
    <sonar.sources>cmd,examples,internal,pkg</sonar.sources>
  </properties>

  <build>
    <sourceDirectory>cmd</sourceDirectory>
    <plugins>
      <!--
        Copy the test-resources in here
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-protocol-test-suites</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.apache.plc4x</groupId>
                  <artifactId>plc4x-protocols-mqtt</artifactId>
                  <classifier>tests</classifier>
                  <type>test-jar</type>
                  <outputDirectory>${project.basedir}/assets/testing</outputDirectory>
                  <includes>**/*.xml</includes>
                  <excludes>META-INF/**</excludes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
        Generate the driver code.
      -->
      <plugin>
        <groupId>org.apache.plc4x.plugins</groupId>
        <artifactId>plc4x-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-driver-mqtt</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate-driver</goal>
            </goals>
            <configuration>
              <protocolName>mqtt</protocolName>
              <languageName>go</languageName>
              <outputFlavor>read-write</outputFlavor>
              <outputDir>${project.basedir}/internal</outputDir>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--plugin>
        <groupId>com.igormaznitsa</groupId>
        <artifactId>mvn-golang-wrapper</artifactId>
        <version>2.3.9</version>
        <extensions>true</extensions>
        <executions>

          <!- - Downloads the dependencies of the project - ->
          <execution>
            <id>default-get</id>
            <phase>initialize</phase>
            <goals>
              <goal>get</goal>
            </goals>
          </execution>

          <!- - Make sure the "stringer" extension as well als the "licenser" is downloaded - ->
          <execution>
            <id>get-tools</id>
            <phase>initialize</phase>
            <goals>
              <goal>get</goal>
            </goals>
            <configuration>
              <packages>
                <package>golang.org/x/tools/cmd/stringer</package>
                <package>github.com/elastic/go-licenser</package>
              </packages>
            </configuration>
          </execution>

          <!- - Run the go code-generation - ->
          <execution>
            <id>default-generate</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <packages>
                <!- - We want to format every package here so we don't get dirty commits - ->
                <package>./...</package>
              </packages>
            </configuration>
          </execution>

          <!- - Add the apache license header to stuff generated by the stringer - ->
          <!- -
            NOTE: Don't try merging the following 4 executions ...
                  It doesn't work by merging the "packages" sections
          - ->
          <execution>
            <id>add-license</id>
            <phase>process-sources</phase>
            <goals>
              <goal>custom</goal>
            </goals>
            <configuration>
              <exec>go-licenser</exec>
              <customCommand>-licensor</customCommand>
              <buildFlags>
                <flag>Apache Software Foundation (ASF)</flag>
              </buildFlags>
              <packages>
                <package>internal/plc4go/mqtt/fieldtype_string.go</package>
              </packages>
            </configuration>
          </execution>

          <!- - Processes code that uses old APIs and rewrites them use newer ones - ->
          <execution>
            <id>default-fix</id>
            <phase>process-sources</phase>
            <goals>
              <goal>fix</goal>
            </goals>
          </execution>

          <!- - Format the codebase correctly (this mainly has an effect on generated code) - ->
          <execution>
            <id>default-fmt</id>
            <phase>process-sources</phase>
            <goals>
              <goal>fmt</goal>
            </goals>
            <configuration>
              <packages>
                <!- - We want to format every package here so we don't get dirty commits - ->
                <package>./...</package>
              </packages>
            </configuration>
          </execution>

          <!- - Get all dependencies for test cases - ->
          <execution>
            <id>get-test-dependencies</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>get</goal>
            </goals>
            <configuration>
              <buildFlags>
                <flag>-t</flag>
              </buildFlags>
              <packages>
                <package>./...</package>
              </packages>
            </configuration>
          </execution>

          <!- - Make sure the xunit generator as well as gotestsum is installed - ->
          <execution>
            <id>test-get</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>get</goal>
            </goals>
            <configuration>
              <packages>
                <package>github.com/tebeka/go2xunit</package>
                <package>gotest.tools/gotestsum</package>
              </packages>
            </configuration>
          </execution>

          <!- - Check all tests with producing report file in Golang format - ->
          <execution>
            <id>default-test</id>
            <phase>test</phase>
            <!- - TODO: Which goal?!? - ->
            <configuration>
              <buildFlags>
                <flag>-v</flag>
              </buildFlags>
              <outLogFile>test-out-verbose.log</outLogFile>
              <ignoreErrorExitCode>true</ignoreErrorExitCode>
              <packages>
                <package>./...</package>
              </packages>
            </configuration>
          </execution>

          <execution>
            <id>readable-test</id>
            <!- - TODO: Possibly move to test or prepare-package - ->
            <phase>test</phase>
            <goals>
              <goal>custom</goal>
            </goals>
            <configuration>
              <exec>gotestsum</exec>
              <customCommand>-f</customCommand>
              <buildFlags>
                <flag>short</flag>
              </buildFlags>
              <packages>
                <package>./...</package>
              </packages>
            </configuration>
          </execution>

          <!- - Convert generated test report into xunit format and save as file - ->
          <execution>
            <id>makeXUnitReport</id>
            <phase>test</phase>
            <goals>
              <goal>custom</goal>
            </goals>
            <configuration>
              <skip>${skipTests}</skip>
              <exec>go2xunit</exec>
              <customCommand>-fail</customCommand>
              <buildFlags>
                <flag>-input</flag>
                <flag>${project.build.directory}${file.separator}reports${file.separator}test-out-verbose.log</flag>
                <flag>-output</flag>
              </buildFlags>
              <echo>
                <info>XUnit report saved as ${xunit.report}</info>
              </echo>
              <packages>
                <package>target${file.separator}surefire-reports${file.separator}xuint.xml</package>
              </packages>
            </configuration>
          </execution>

          <execution>
            <id>run-go-vet</id>
            <phase>verify</phase>
            <goals>
              <goal>vet</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <packages>
            <package>github.com/apache/plc4x/plc4go/cmd/main</package>
          </packages>
          <sources>${project.basedir}</sources>
          <verbose>true</verbose>
        </configuration>
      </plugin-->

      <!--
        Create surefire folder for report
      -->
      <!--plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <mkdir dir="target${file.separator}surefire-reports" />
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin-->

      <!-- For this module deploying maven artifacts doesn't make any sense -->
      <!--plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin-->
    </plugins>
  </build>

  <!-- This dependency is just to ensure thrift is built first -->
  <dependencies>
    <dependency>
      <groupId>org.apache.plc4x</groupId>
      <artifactId>plc4x-code-generation-language-go</artifactId>
      <version>0.10.0-SNAPSHOT</version>
      <!-- Scope is 'provided' as this way it's not shipped with the driver -->
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.plc4x</groupId>
      <artifactId>plc4x-protocols-mqtt</artifactId>
      <version>0.10.0-SNAPSHOT</version>
      <!-- Scope is 'provided' as this way it's not shipped with the driver -->
      <scope>provided</scope>
    </dependency>
  </dependencies>

</project>